# -*- coding: utf-8 -*-
"""genders_Data_Aug.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x9WmZ_wbYs-z4NT4J7Zo5Nu-1cFlc4qU

**Genders Classification Using Data Augmentation Technique with CNN**
"""

from keras.preprocessing.image import ImageDataGenerator

train_data_dir='/content/drive/MyDrive/train'
valid_data_dir='/content/drive/MyDrive/Valid'
train_dataset=ImageDataGenerator(rescale=1.0/255,   #ormalization
                                 rotation_range=30,
                                 shear_range=0.2,
                                 horizontal_flip=True,
                                 width_shift_range=0.2,
                                 height_shift_range=0.2,
                                 fill_mode='nearest')
test_dataset=ImageDataGenerator(rescale=1.0/255)
batch_size=16

train_generator=train_dataset.flow_from_directory(
    train_data_dir,
    target_size=(150,150),
    color_mode='rgb',
     shuffle=True,         #shuffling data
    batch_size=batch_size,
    class_mode='binary'
)

validation_generator=test_dataset.flow_from_directory(
    valid_data_dir,
    target_size=(150,150),
    color_mode='rgb',
    batch_size=batch_size,
    shuffle=False,
    class_mode='binary'
)

from keras.models import Sequential
from keras.layers import Conv2D,Dense,MaxPooling2D,LeakyReLU,Flatten,Dropout

model=Sequential()
model.add(Conv2D(32,(3,3),strides=(1,1),padding='same',input_shape=(150,150,3)))
model.add(LeakyReLU(alpha=0.1))
model.add(MaxPooling2D(2,2))

model.add(Conv2D(64,(3,3),strides=(1,1),padding='same'))
model.add(LeakyReLU(alpha=0.1))
model.add(MaxPooling2D(2,2))

model.add(Conv2D(128,(3,3),strides=(1,1),padding='same'))
model.add(LeakyReLU(alpha=0.1))
model.add(Flatten())

model.add(Dense(256, activation='relu'))
model.add(Dense(128,activation='relu'))

model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))
model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.fit(train_generator,steps_per_epoch=2068/batch_size,epochs=10,validation_data=validation_generator,validation_steps=1045/batch_size)

"""**Model Evaluation**"""

evaluation = model.evaluate(validation_generator, steps=1045 / batch_size)
loss = evaluation[0]
accuracy = evaluation[1]
print(f"Validation Loss: {loss:.4f}")
print(f"Validation Accuracy: {accuracy:.4f}")

true_labels=validation_generator.classes
probs=model.predict(validation_generator)
predicted_labels=np.round(probs)

"""**Classification Report**"""

from sklearn.metrics import classification_report
cr=classification_report(true_labels,predicted_labels)
print(cr)

"""**Confusion Matrix**"""

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(true_labels,predicted_labels)

import seaborn as sns
sns.heatmap(cm,annot=True,cmap='Paired')

"""**Testing Our Model**"""

image_path = '/content/drive/MyDrive/test/female/160063.jpg'
img = cv2.imread(image_path)
resized_img = cv2.resize(img, (150, 150))
normalized_img = resized_img / 255.0
reshaped_img = normalized_img.reshape(1, 150, 150, 3)
prediction = model.predict(reshaped_img)
predicted_class = "female" if prediction >0.5 else "male"
plt.imshow(normalized_img)
plt.title(f"Predicted Class: {predicted_class}")
plt.axis('off')
plt.show()

model.save('genders_CNN_data.h5')