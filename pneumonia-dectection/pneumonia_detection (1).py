# -*- coding: utf-8 -*-
"""pneumonia detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17vrQhjOeGzfAQ9gYSBT80WWmnQoChOCD
"""

from keras.preprocessing.image import ImageDataGenerator

train_data_dir='/content/drive/MyDrive/pnemonia/train'
valid_data_dir='/content/drive/MyDrive/pnemonia/test'

train_datagen=ImageDataGenerator(rescale=1.0/255,
                                 rotation_range=45,
                                 shear_range=0.2,
                                 zoom_range=0.2,
                                 height_shift_range=0.2,
                                 width_shift_range=0.2,
                                 horizontal_flip=True,
                                 fill_mode='nearest')
test_datagen=ImageDataGenerator(rescale=1.0/255)

batch_size=32
train_generator=train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(150,150),
    color_mode='rgb',
    class_mode='binary',
    shuffle=True,
    batch_size=batch_size
)
valid_generator=test_datagen.flow_from_directory(
    valid_data_dir,
    target_size=(150,150),
    color_mode='rgb',
    shuffle=False,
    class_mode='binary',
    batch_size=batch_size)

from keras.models import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,LeakyReLU,Flatten,Dropout

model=Sequential()

#Building a CNN Model
#A CNN model has three layers which includes Convolutional layer,pooling layer and a fully connected layer

#convolutional layer

model.add(Conv2D(32,(3,3),strides=(1,1),padding='same',input_shape=(150,150,3)))
model.add(LeakyReLU(0.1))
#pooling layer
model.add(MaxPooling2D(2,2))

#convolutional layer
model.add(Conv2D(64,(3,3),strides=(1,1),padding='same'))
model.add(LeakyReLU(0.1))
#pooling layer
model.add(MaxPooling2D(2,2))

#convolutional layer
model.add(Conv2D(128,(3,3),strides=(1,1),padding='same'))
model.add(LeakyReLU(0.1))
#pooling layer
model.add(MaxPooling2D(2,2))

model.add(Flatten())
#fully connected layer
model.add(Dense(128,activation='relu'))
model.add(Dense(1,activation='sigmoid'))


#compiling a model
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

#model summary
model.summary()

history=model.fit(train_generator,epochs=50,steps_per_epoch=5211/batch_size,validation_data=valid_generator,validation_steps=624/batch_size)

plt.plot(history.history['loss'])
plt.plot(history.history['accuracy'])
plt.title('Model History')
plt.ylabel('Loss/Accuracy')
plt.xlabel('Epoch')
plt.legend(['Loss', 'Accuracy'], loc='upper left')
plt.show()

loss,accuracy=model.evaluate(valid_generator)
print('loss:',loss)
print('accuracy:',accuracy*100)

true_labels=valid_generator.classes

import numpy as np
y_probs=model.predict(valid_generator)
y_predict=np.round(y_probs)

from sklearn.metrics import classification_report , confusion_matrix
import seaborn as sns

cm=confusion_matrix(y_predict,true_labels)
sns.heatmap(cm,annot=True,cmap='coolwarm')

cr=classification_report(y_predict,true_labels)
print('Classification Report')
print(cr)

"""**Testing model with unseen pics**"""

import cv2 as cv
import matplotlib.pyplot as plt

path = '/content/drive/MyDrive/pnemonia/val/pneumonia/person1947_bacteria_4876.jpeg' #pneumonia x-ray image
input_pic = cv.imread(path)
resized_pic = cv.resize(input_pic, (150, 150))
normalized_pic = resized_pic / 255.0
reshaped_pic = normalized_pic.reshape(1, 150, 150, 3)
prediction = model.predict(reshaped_pic)
predicted_class = "pneumonia" if prediction[0][0]> 0.5 else "normal"

plt.imshow(normalized_pic)
plt.title(f"Predicted Class: {predicted_class}")
plt.axis('off')
plt.show()

model.save('pneumonia.h5')

